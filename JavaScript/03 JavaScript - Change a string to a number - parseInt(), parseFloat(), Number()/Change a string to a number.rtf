{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset204 PTSerif-Regular;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue255;\red109\green109\blue109;
\red29\green29\blue29;\red210\green0\blue53;\red12\green99\blue153;\red245\green245\blue245;\red148\green108\blue71;
\red255\green255\blue255;\red133\green0\blue67;\red93\green108\blue125;\red85\green138\blue3;\red107\green0\blue109;
}
{\*\expandedcolortbl;;\cssrgb\c1680\c19835\c100000;\cssrgb\c100000\c100000\c100000;\cssrgb\c50196\c50196\c50196;
\cssrgb\c15294\c15294\c15294;\cssrgb\c86667\c6667\c26667;\cssrgb\c0\c46667\c66667;\cssrgb\c96863\c96863\c96863;\cssrgb\c65098\c49804\c34902;
\cssrgb\c100000\c100000\c100000\c49804;\cssrgb\c60000\c0\c33333;\cssrgb\c43922\c50196\c56471;\cssrgb\c40000\c60000\c0;\cssrgb\c50196\c0\c50196;
}
\margl1440\margr1440\vieww19000\viewh18400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://gomakethings.com/converting-strings-to-numbers-with-vanilla-javascript/"}}{\fldrslt 
\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
https://gomakethings.com/converting-strings-to-numbers-with-vanilla-javascript/}}
\f0\fs36 \cf4 \cb3 \expnd0\expndtw0\kerning0
\
\
November 6, 2017\cb1 \
\pard\pardeftab720\sl740\sa630\partightenfactor0

\b\fs63 \cf5 \cb3 Converting strings to numbers with vanilla JavaScript\cb1 \
\pard\pardeftab720\sl460\sa562\partightenfactor0

\b0\fs36 \cf5 \cb3 In JavaScript, you can represent a number is an actual number (ex.\'a0
\f1\fs31\fsmilli15750 \cf6 42
\f0\fs36 \cf5 ), or as a string (ex.\'a0
\f1\fs31\fsmilli15750 \cf6 '42'
\f0\fs36 \cf5 ).\
If you were to use a strict comparison to compare the two, it would fail because they\'92re two different types of objects.\
\pard\pardeftab720\sl460\partightenfactor0

\f1\fs31\fsmilli15750 \cf7 \cb8 var\cf5  num1 \cf9 \cb10 =\cf5 \cb8  \cf11 42\cf12 ;\cf5 \
\cf7 var\cf5  num2 \cf9 \cb10 =\cf5 \cb8  \cf13 '42'\cf12 ;\cf5 \
\cf7 if\cf5  \cf12 (\cf5 num1 \cf9 \cb10 ===\cf5 \cb8  num2\cf12 )\cf5  \cf12 \{\cf5 \
    console\cf12 .\cf5 log\cf12 (\cf11 true\cf12 );\cf5 \
\cf12 \}\cf5  \cf7 else\cf5  \cf12 \{\cf5 \
    console\cf12 .\cf5 log\cf12 (\cf11 false\cf12 );\cf5 \
\cf12 \}\cf5 \
\cf12 // Will log `false`\
\pard\pardeftab720\sl460\sa562\partightenfactor0

\f0\fs36 \cf5 \cb3 \
Today, let\'92s look at three different ways to convert a string into a number.\
\pard\pardeftab720\sl320\sa315\partightenfactor0

\f2\b\fs27\fsmilli13781 \cf6 parseInt()
\f0\fs31\fsmilli15750 \cf5 \'a0{\field{\*\fldinst{HYPERLINK "https://gomakethings.com/converting-strings-to-numbers-with-vanilla-javascript/#parseint"}}{\fldrslt \cf14 #}}\
\pard\pardeftab720\sl460\sa562\partightenfactor0

\b0\fs36 \cf5 The\'a0
\f1\fs31\fsmilli15750 \cf6 parseInt()
\f0\fs36 \cf5 \'a0method converts a string into an integer (a whole number).\
It accepts two arguments. The first argument is the string to convert. The second argument is called the\'a0
\f1\fs31\fsmilli15750 \cf6 radix
\f0\fs36 \cf5 . This is the base number used in mathematical systems. For our use, it should always be\'a0
\f1\fs31\fsmilli15750 \cf6 10
\f0\fs36 \cf5 .\
\pard\pardeftab720\sl460\partightenfactor0

\f1\fs31\fsmilli15750 \cf7 \cb8 var\cf5  text \cf9 \cb10 =\cf5 \cb8  \cf13 '42px'\cf12 ;\cf5 \
\cf7 var\cf5  integer \cf9 \cb10 =\cf5 \cb8  \cf7 parseInt\cf12 (\cf5 text\cf12 ,\cf5  \cf11 10\cf12 );\cf5 \
\cf12 // returns 42\
\pard\pardeftab720\sl320\sa315\partightenfactor0

\f2\b\fs27\fsmilli13781 \cf6 \cb3 \
\
parseFloat()
\f0\fs31\fsmilli15750 \cf5 \'a0{\field{\*\fldinst{HYPERLINK "https://gomakethings.com/converting-strings-to-numbers-with-vanilla-javascript/#parsefloat"}}{\fldrslt \cf14 #}}\
\pard\pardeftab720\sl460\sa562\partightenfactor0

\b0\fs36 \cf5 The\'a0
\f1\fs31\fsmilli15750 \cf6 parseFloat()
\f0\fs36 \cf5 \'a0method converts a string into a point number (a number with decimal points). You can even pass in strings with random text in them.\
\pard\pardeftab720\sl460\partightenfactor0

\f1\fs31\fsmilli15750 \cf7 \cb8 var\cf5  text \cf9 \cb10 =\cf5 \cb8  \cf13 '3.14someRandomStuff'\cf12 ;\cf5 \
\cf7 var\cf5  pointNum \cf9 \cb10 =\cf5 \cb8  \cf7 parseFloat\cf12 (\cf5 text\cf12 );\cf5 \
\cf12 // returns 3.14\
\pard\pardeftab720\sl320\sa315\partightenfactor0

\f2\b\fs27\fsmilli13781 \cf6 \cb3 \
\
Number()
\f0\fs31\fsmilli15750 \cf5 \'a0{\field{\*\fldinst{HYPERLINK "https://gomakethings.com/converting-strings-to-numbers-with-vanilla-javascript/#number"}}{\fldrslt \cf14 #}}\
\pard\pardeftab720\sl460\sa562\partightenfactor0

\b0\fs36 \cf5 The\'a0
\f1\fs31\fsmilli15750 \cf6 Number()
\f0\fs36 \cf5 \'a0method converts a string to a number.\
Sometimes it\'92s an integer. Other times it\'92s a point number. And if you pass in a string with random text in it, you\'92ll get\'a0
\f1\fs31\fsmilli15750 \cf6 NaN
\f0\fs36 \cf5 , an acronym for \'93Not a Number.\'94\
As a result of this inconsistency, it\'92s a less safe choice than\'a0
\f1\fs31\fsmilli15750 \cf6 parseInt()
\f0\fs36 \cf5 \'a0and\'a0
\f1\fs31\fsmilli15750 \cf6 parseFloat()
\f0\fs36 \cf5 . If you know the format of the number you\'92d like, use those instead. If you want the string to fail with\'a0
\f1\fs31\fsmilli15750 \cf6 NaN
\f0\fs36 \cf5 \'a0if it has other characters in it,\'a0
\f1\fs31\fsmilli15750 \cf6 Number()
\f0\fs36 \cf5 \'a0may actually be a better choice.\
\pard\pardeftab720\sl460\partightenfactor0

\f1\fs31\fsmilli15750 \cf12 \cb8 // Convert strings\
\cf7 Number\cf12 (\cf13 '123'\cf12 );\cf5  \cf12 // returns 123\
\cf7 Number\cf12 (\cf13 '12.3'\cf12 );\cf5  \cf12 // returns 12.3\
\cf7 Number\cf12 (\cf13 '3.14someRandomStuff'\cf12 );\cf5  \cf12 // returns NaN\
\cf7 Number\cf12 (\cf13 '42px'\cf12 );\cf5  \cf12 // returns NaN\
\pard\pardeftab720\sl360\sa315\partightenfactor0

\f0\b \cf5 \cb3 \
\
Browser Compatibility\'a0{\field{\*\fldinst{HYPERLINK "https://gomakethings.com/converting-strings-to-numbers-with-vanilla-javascript/#browser-compatibility"}}{\fldrslt \cf14 #}}\
\pard\pardeftab720\sl460\sa562\partightenfactor0

\b0\fs36 \cf5 All three methods work in all modern browsers, and IE6 and up.\
If you found this post useful, you might also like my\'a0{\field{\*\fldinst{HYPERLINK "https://gomakethings.com/guides/string-array-and-object-manipulation/"}}{\fldrslt 
\i \cf14 \ul \ulc14 Strings, Arrays, & Objects
\i0 \'a0pocket guide}}, which features a ton of useful methods like these.\
}