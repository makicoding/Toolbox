{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red27\green29\blue31;\red255\green255\blue255;\red235\green236\blue237;
\red255\green247\blue212;\red104\green26\blue29;\red36\green38\blue41;\red114\green121\blue129;\red13\green0\blue129;
\red43\green39\blue19;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c14118\c15294\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c93725\c94118\c94510;
\cssrgb\c100000\c97255\c86275;\cssrgb\c49020\c15294\c15294;\cssrgb\c18824\c20000\c21176;\cssrgb\c52157\c54902\c57647;\cssrgb\c6275\c6275\c58039;
\cssrgb\c22353\c20000\c9412;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww11940\viewh18400\viewkind0
\deftab720
\pard\pardeftab720\sl340\sa300\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons"}}{\fldrslt 
\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons}}
\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\
\pard\pardeftab720\sl340\sa300\partightenfactor0

\b\fs48 \cf2 === vs ==\
\pard\pardeftab720\sl340\sa300\partightenfactor0

\b0\fs30 \cf2 \
The identity (
\f1\fs26 \cb4 ===
\f0\fs30 \cb3 ) operator behaves identically to the equality (
\f1\fs26 \cb4 ==
\f0\fs30 \cb3 ) operator except no type conversion is done, and the types must be the same to be considered equal.\
The\'a0
\f1\fs26 \cb4 ==
\f0\fs30 \cb3 \'a0operator will compare for equality\'a0
\i after doing any necessary type conversions
\i0 . The\'a0
\f1\fs26 \cb4 ===
\f0\fs30 \cb3 operator will\'a0
\b not
\b0 \'a0do the conversion, so if two values are not the same type\'a0
\f1\fs26 \cb4 ===
\f0\fs30 \cb3 \'a0will simply return\'a0
\f1\fs26 \cb4 false
\f0\fs30 \cb3 . Both are equally quick.\
\
\pard\pardeftab720\sl340\sa300\partightenfactor0
\cf2 \cb5 JavaScript has two sets of equality operators:\'a0
\f1\fs26 \cb4 ===
\f0\fs30 \cb5 \'a0and\'a0
\f1\fs26 \cb4 !==
\f0\fs30 \cb5 , and their evil twins\'a0
\f1\fs26 \cb4 ==
\f0\fs30 \cb5 \'a0and\'a0
\f1\fs26 \cb4 !=
\f0\fs30 \cb5 . The good ones work the way you would expect. If the two operands are of the same type and have the same value, then\'a0
\f1\fs26 \cb4 ===
\f0\fs30 \cb5 \'a0produces\'a0
\f1\fs26 \cb4 true
\f0\fs30 \cb5 \'a0and\'a0
\f1\fs26 \cb4 !==
\f0\fs30 \cb5 \'a0produces\'a0
\f1\fs26 \cb4 false
\f0\fs30 \cb5 . The evil twins do the right thing when the operands are of the same type, but if they are of different types, they attempt to coerce the values. the rules by which they do that are complicated and unmemorable. These are some of the interesting cases:\cb1 \
\pard\pardeftab720\sl300\partightenfactor0

\f1\fs26 \cf6 \cb4 \strokec6 ''\cf7 \strokec7  == \cf6 \strokec6 '0'\cf7 \strokec7            \cf8 \strokec8 // false\cf7 \strokec7 \
\cf6 \strokec6 0\cf7 \strokec7  == \cf6 \strokec6 ''\cf7 \strokec7              \cf8 \strokec8 // true\cf7 \strokec7 \
\cf6 \strokec6 0\cf7 \strokec7  == \cf6 \strokec6 '0'\cf7 \strokec7             \cf8 \strokec8 // true\cf7 \strokec7 \
\
\pard\pardeftab720\sl300\partightenfactor0
\cf9 \strokec9 false\cf7 \strokec7  == \cf6 \strokec6 'false'\cf7 \strokec7     \cf8 \strokec8 // false\cf7 \strokec7 \
\cf9 \strokec9 false\cf7 \strokec7  == \cf6 \strokec6 '0'\cf7 \strokec7         \cf8 \strokec8 // true\cf7 \strokec7 \
\
\cf9 \strokec9 false\cf7 \strokec7  == \cf9 \strokec9 undefined\cf7 \strokec7   \cf8 \strokec8 // false\cf7 \strokec7 \
\cf9 \strokec9 false\cf7 \strokec7  == \cf9 \strokec9 null\cf7 \strokec7        \cf8 \strokec8 // false\cf7 \strokec7 \
\cf9 \strokec9 null\cf7 \strokec7  == \cf9 \strokec9 undefined\cf7 \strokec7    \cf8 \strokec8 // true\cf7 \strokec7 \
\
\pard\pardeftab720\sl300\partightenfactor0
\cf6 \strokec6 ' \\t\\r\\n '\cf7 \strokec7  == \cf6 \strokec6 0\cf7 \strokec7      \cf8 \strokec8 // true\cf10 \strokec10 \
\pard\pardeftab720\sl340\partightenfactor0

\f0\fs30 \cf2 \cb11 \strokec2 \
\cb5 The lack of transitivity is alarming. My advice is to never use the evil twins. Instead, always use\'a0
\f1\fs26 \cb4 ===
\f0\fs30 \cb5 \'a0and\'a0
\f1\fs26 \cb4 !==
\f0\fs30 \cb5 . All of the comparisons just shown produce\'a0
\f1\fs26 \cb4 false
\f0\fs30 \cb5 \'a0with the\'a0
\f1\fs26 \cb4 ===
\f0\fs30 \cb5 \'a0operator.\cb1 \
}