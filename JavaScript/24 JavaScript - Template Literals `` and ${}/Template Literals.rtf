{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red27\green29\blue31;\red255\green255\blue255;\red38\green38\blue38;
\red36\green38\blue41;\red235\green236\blue237;\red104\green26\blue29;\red114\green121\blue129;\red43\green39\blue19;
\red13\green0\blue129;}
{\*\expandedcolortbl;;\cssrgb\c14118\c15294\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c20000\c20000\c20000;
\cssrgb\c18824\c20000\c21176;\cssrgb\c93725\c94118\c94510;\cssrgb\c49020\c15294\c15294;\cssrgb\c52157\c54902\c57647;\cssrgb\c22353\c20000\c9412;
\cssrgb\c6275\c6275\c58039;}
\margl1440\margr1440\vieww10800\viewh11080\viewkind0
\deftab720
\pard\pardeftab720\sl380\sa300\partightenfactor0

\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 Template Literals
\fs30 \ulnone \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \strokec4 Template literals are string literals allowing embedded expressions. 
\fs32 \

\fs30 \cf2 \strokec2 \
\pard\pardeftab720\sl380\sa300\partightenfactor0
\cf2 They allow for both multiline strings and string interpolation.\
\cb1 \
\cb3 Multiline strings:\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\fs26 \cf5 \cb6 \strokec5 console.log(\cf7 \strokec7 `foo\
bar`\cf5 \strokec5 );\
\pard\pardeftab720\sl320\partightenfactor0
\cf8 \strokec8 // foo\cf5 \strokec5 \
\cf8 \strokec8 // bar\cf9 \strokec9 \
\pard\pardeftab720\sl380\sa300\partightenfactor0

\f0\fs30 \cf2 \cb3 \strokec2 String interpolation:\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\fs26 \cf10 \cb6 \strokec10 var\cf5 \strokec5  foo = \cf7 \strokec7 'bar'\cf5 \strokec5 ;\
console.log(\cf7 \strokec7 `Let's meet at the $\{foo\}`\cf5 \strokec5 );\
\pard\pardeftab720\sl320\partightenfactor0
\cf8 \strokec8 // Let's meet at the bar\cf9 \strokec9 \
\pard\pardeftab720\sl300\partightenfactor0

\f0 \cf2 \cb1 \strokec2 \
}